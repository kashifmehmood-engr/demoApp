name: Build and Push Docker Image

# Define the events that trigger this workflow
on:
  push:
    branches:
      - main  # Trigger the workflow on push to the 'main' branch
  pull_request:
    branches:
      - main  # Trigger the workflow on pull requests to the 'main' branch

# Define permissions needed for the workflow
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  build:
    runs-on: ubuntu-latest  # Use an Ubuntu runner for the job
    environment: dev

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 2: Set up JDK (Optional, if not already available)
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'zulu'

    # Step 3: Build the project using Maven
    - name: Build with Maven
      run: mvn clean install -DskipTests


    # Step 4: Build the Docker image
    - name: Build Docker image
      env:
        ECR_REGISTRY_URL_SECRET: ${{ secrets.ECR_REGISTRY_URL }}
      run: |
        docker build -t "$ECR_REGISTRY_URL_SECRET:${GITHUB_SHA}" .

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.aws_account_id }}:role/${{ secrets.GH_IAM_ROLE }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registries: ${{ secrets.aws_account_id }}

    - name: push image to Amazon ECR
      id: build-publish
      shell: bash
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPOSITORY }}
        IMAGE_TAG: ${GITHUB_SHA}
      run: |
        docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
